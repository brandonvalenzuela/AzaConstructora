# Pipeline de CI/CD - AZA Constructora
# Automatiza el despliegue del sitio web

name: Deploy AZA Constructora Website

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch: # Permite ejecutar manualmente

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout c√≥digo
      uses: actions/checkout@v4
      
    - name: üü¢ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: üì¶ Instalar dependencias
      run: npm ci
      
    - name: üîß Crear archivo .env desde secrets
      run: |
        echo "FRONTEND_URL=${{ secrets.FRONTEND_URL }}" >> .env
        echo "EMAILJS_SERVICE_ID=${{ secrets.EMAILJS_SERVICE_ID }}" >> .env
        echo "EMAILJS_TEMPLATE_ID=${{ secrets.EMAILJS_TEMPLATE_ID }}" >> .env
        echo "EMAILJS_PUBLIC_KEY=${{ secrets.EMAILJS_PUBLIC_KEY }}" >> .env
        
    - name: ‚öôÔ∏è Generar configuraci√≥n de EmailJS
      run: npm run config
      
    - name: üîç Verificar archivos generados
      run: |
        echo "üìÅ Contenido de js/:"
        ls -la js/
        echo "\nüìÑ Contenido de config.js:"
        cat js/config.js
        echo "\n‚úÖ Archivos cr√≠ticos:"
        ls -la *.html css/ media/
        
    - name: üß™ Ejecutar tests
      run: npm test --if-present
      continue-on-error: true # No fallar si no hay tests
      
    - name: üèóÔ∏è Build del proyecto
      run: npm run build
      
    - name: ‚úÖ Validar estructura del proyecto
      run: |
        echo "üîç Validando archivos cr√≠ticos..."
        test -f index.html && echo "‚úÖ index.html" || echo "‚ùå index.html"
        test -f contacto.html && echo "‚úÖ contacto.html" || echo "‚ùå contacto.html"
        test -f js/config.js && echo "‚úÖ js/config.js" || echo "‚ùå js/config.js"
        test -f js/contact-handler.js && echo "‚úÖ js/contact-handler.js" || echo "‚ùå js/contact-handler.js"
        test -f css/styles.css && echo "‚úÖ css/styles.css" || echo "‚ùå css/styles.css"
        
    # Ejemplo de deploy a diferentes proveedores
    # Descomenta y configura seg√∫n tu proveedor
    
    # Deploy a Vercel
    # - name: üöÄ Deploy a Vercel
    #   uses: amondnet/vercel-action@v25
    #   with:
    #     vercel-token: ${{ secrets.VERCEL_TOKEN }}
    #     vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
    #     vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
    
    # Deploy a Netlify
    # - name: üöÄ Deploy a Netlify
    #   uses: nwtgck/actions-netlify@v2.0
    #   with:
    #     publish-dir: './'
    #     production-branch: main
    #     github-token: ${{ secrets.GITHUB_TOKEN }}
    #     deploy-message: "Deploy desde GitHub Actions"
    #   env:
    #     NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
    #     NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
    
    # Deploy a AWS S3
    # - name: üöÄ Deploy a AWS S3
    #   run: |
    #     aws s3 sync . s3://${{ secrets.S3_BUCKET }} --exclude ".git/*" --exclude "node_modules/*" --exclude ".env"
    #   env:
    #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #     AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
    
    # Deploy por FTP/SFTP
    # - name: üöÄ Deploy por FTP
    #   uses: SamKirkland/FTP-Deploy-Action@4.3.3
    #   with:
    #     server: ${{ secrets.FTP_SERVER }}
    #     username: ${{ secrets.FTP_USERNAME }}
    #     password: ${{ secrets.FTP_PASSWORD }}
    #     local-dir: ./
    #     exclude: |
    #       **/.git*
    #       **/.git*/**
    #       **/node_modules/**
    #       .env
    #       deploy.js
    #       generate-config.js
    
    - name: üéâ Notificar √©xito
      run: |
        echo "‚úÖ Deploy completado exitosamente"
        echo "üåê Sitio web listo para producci√≥n"
        echo "üìß EmailJS configurado correctamente"
        echo "üîß Variables de entorno aplicadas"
        
    - name: üìä Resumen del deploy
      run: |
        echo "## üìã Resumen del Deploy" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "‚úÖ **Estado**: Exitoso" >> $GITHUB_STEP_SUMMARY
        echo "üìÖ **Fecha**: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "üîß **Configuraci√≥n**: EmailJS aplicada" >> $GITHUB_STEP_SUMMARY
        echo "üìÅ **Archivos**: Todos los archivos cr√≠ticos validados" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üéØ Pr√≥ximos pasos:" >> $GITHUB_STEP_SUMMARY
        echo "1. Verificar funcionalidad del sitio web" >> $GITHUB_STEP_SUMMARY
        echo "2. Probar formularios de contacto" >> $GITHUB_STEP_SUMMARY
        echo "3. Validar responsive design" >> $GITHUB_STEP_SUMMARY

# üìù Variables requeridas en GitHub Secrets:
# 
# üåê Frontend:
# - FRONTEND_URL: URL del frontend en producci√≥n
# 
# üìß SMTP (opcional):
# - SMTP_HOST: Servidor SMTP
# - SMTP_PORT: Puerto SMTP  
# - SMTP_USER: Usuario SMTP
# - SMTP_PASS: Contrase√±a SMTP
# - CONTACT_EMAIL: Email de contacto
# 
# üì® EmailJS (requerido):
# - EMAILJS_SERVICE_ID: ID del servicio EmailJS
# - EMAILJS_TEMPLATE_ID: ID del template EmailJS
# - EMAILJS_PUBLIC_KEY: Clave p√∫blica EmailJS
#
# üöÄ Deploy (seg√∫n proveedor):
# - VERCEL_TOKEN, VERCEL_ORG_ID, VERCEL_PROJECT_ID
# - NETLIFY_AUTH_TOKEN, NETLIFY_SITE_ID
# - AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_DEFAULT_REGION, S3_BUCKET
# - FTP_SERVER, FTP_USERNAME, FTP_PASSWORD